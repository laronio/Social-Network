{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusClasses.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/avatar.jpg","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","state","editMode","status","props","activateEditMode","setState","deactivateEditMode","updateUserStatus","onChangeStatus","e","currentTarget","value","prevProps","prevState","this","onDoubleClick","onChange","autoFocus","onBlur","React","Component","ProfileDataFormWrap","reduxForm","form","handleSubmit","profile","error","onSubmit","className","classes","commonLoginError","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","Preloader","profileInfo","descriptionBlock","src","photos","large","person","alt","mainPhoto","initialValues","formData","then","target","files","length","Post","post","post_img","avatar","message","post_likes","likes","maxLength10","maxLengthCreator","ReduxAddNewPostForm","Field","component","name","validate","required","MyPosts","memo","console","log","postElements","postItem","postsBlock","values","addPost","newPostText","posts","MyPostsContainer","connect","profileReducer","dispatch","action","addNewPostCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","snapshot","selectedUserProfile","compose","authHeader","isAuth","withRouter"],"mappings":"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","file":"static/js/3.afa1410d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo_img\":\"ProfileInfo_profileInfo_img__1kscW\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3rvx9\",\"mainPhoto\":\"ProfileInfo_mainPhoto__B2iSb\",\"contact\":\"ProfileInfo_contact__3QWFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3IiAB\",\"posts\":\"MyPosts_posts__2PiDF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_img\":\"Post_post_img__K2wKv\"};","import React from \"react\";\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n  state = {\r\n    editMode: false,\r\n    status: this.props.status\r\n  }\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true\r\n    })\r\n  }\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false\r\n    });\r\n    this.props.updateUserStatus(this.state.status);\r\n  }\r\n\r\n  onChangeStatus = (e) => {\r\n    this.setState({\r\n      status: e.currentTarget.value\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(this.props.status !== prevProps.status) {\r\n      this.setState({\r\n        status: this.props.status\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          {!this.state.editMode && \r\n           <div>\r\n            <b>Status: </b><span onDoubleClick={this.activateEditMode} >{this.props.status || \"------------\"}</span>\r\n          </div>}\r\n          {this.state.editMode && \r\n           <div>\r\n            <b>Status: </b><input onChange={this.onChangeStatus} autoFocus={true} value={this.state.status} onBlur={this.deactivateEditMode} />\r\n          </div>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProfileStatus;","import { reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from \"../../../utills/formsControls/formsControls\";\r\nimport classes from \"../../../utills/formsControls/FormControls.module.css\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <div className={classes.commonLoginError}>{error}</div>}\r\n            <button>Save</button>\r\n            <div>\r\n                <b>Name: </b>{createField(\"Name\", \"fullName\", Input, [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{createField(\"\", \"lookingForAJob\", Input, [], {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>Professional skills: </b>{createField(\"Professional skills\", \"lookingForAJobDescription\", Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>{createField(\"About me\", \"aboutMe\", Textarea, [])}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b> :{Object.keys(profile.contacts).map(\r\n                    (key) => {\r\n                        return (\r\n                            <div>\r\n                                <b>{key}: {createField(key, \"contacts.\" + key, Input, [])}</b>\r\n                            </div>\r\n                                )})\r\n                    }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormWrap = reduxForm({\r\n    form: \"profileForm\"\r\n})(ProfileDataForm);\r\n\r\n\r\n\r\nexport default ProfileDataFormWrap;","import classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../Users/preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatusClasses\";\r\nimport person from \"../../Users/person.png\";\r\nimport { useState } from \"react\";\r\nimport ProfileDataFormWrap from \"./ProfileDataForm\";\r\n\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    if(!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if(e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => setEditMode(false)\r\n        )\r\n    }\r\n\r\n    return (\r\n      <div className={classes.profileInfo}>\r\n          <div className={classes.descriptionBlock}>\r\n               <img src={profile.photos.large || person } alt=\"big\" className={classes.mainPhoto} />\r\n               {editMode \r\n               ? <ProfileDataFormWrap initialValues={profile} profile={profile} onSubmit={onSubmit} /> \r\n               : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} />}\r\n               {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n               <ProfileStatus status={status} updateUserStatus={updateUserStatus} />\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={goToEditMode}>Edit</button>}\r\n            <div>\r\n                <p><b>Name: </b>{profile.fullName}</p>\r\n            </div>\r\n            <div>\r\n                <p><b>Looking for a job: </b>{profile.lookingForAJob ? \"Yes\" : \"No\"}</p>\r\n            </div>\r\n            {profile.lookingForAJob && \r\n            <div>\r\n                <p><b>Professional skills: </b>{profile.lookingForAJobDescription}</p>\r\n            </div>}\r\n\r\n            <div>\r\n                <p><b>About me: </b>{profile.aboutMe}</p>\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b> :{Object.keys(profile.contacts).map(\r\n                    (key) => <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />)\r\n                    }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={classes.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","export default __webpack_public_path__ + \"static/media/avatar.bf0da7af.jpg\";","import classes from \"./Post.module.css\";\r\nimport avatar from \"./avatar.jpg\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n      <div className={classes.post}>\r\n        <img className={classes.post_img} src={avatar} alt=\"avatar\" />\r\n        {props.message}\r\n        <div>\r\n            <span className={classes.post_likes}>{props.likes}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { Field } from \"redux-form\";\r\nimport { required, maxLengthCreator } from \"../../../utills/validators/validators\";\r\nimport { Textarea } from \"../../../utills/formsControls/formsControls\";\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]} />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ReduxAddNewPostForm = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  console.log(\"Render!\")\r\n  let postElements = props.postItem.map((post) => <Post message={post.message} likes={post.likes} />)\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  }\r\n\r\n    return (\r\n      <div className={classes.postsBlock}>\r\n          <h3>My posts</h3>\r\n          <ReduxAddNewPostForm onSubmit={onAddPost} />\r\n          <div className={classes.posts}>\r\n            {postElements}\r\n          </div>\r\n      </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import MyPosts from \"./MyPosts\";\r\nimport { addNewPostCreator} from \"../../../Redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    newPostText: state.profileReducer.newPostText,\r\n    postItem: state.profileReducer.postItem\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      let action = addNewPostCreator(newPostText);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n      <div className={classes.profile}>\r\n          <ProfileInfo \r\n          profile={props.profile}\r\n          status={props.status}\r\n          updateUserStatus={props.updateUserStatus}\r\n          isOwner={props.isOwner}\r\n          savePhoto={props.savePhoto}\r\n          saveProfile={props.saveProfile} />\r\n          <MyPostsContainer />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { getUserProfile, getUserStatus, updateUserStatus, savePhoto } from \"../../Redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { saveProfile } from \"../../Redux/profileReducer\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n      let userId = this.props.match.params.userId;\r\n      if(!userId) {\r\n        userId = this.props.authorizedUserId;\r\n        if(!userId) {\r\n          this.props.history.push(\"/login\");\r\n        }\r\n      }\r\n      this.props.getUserProfile(userId);\r\n      this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n     if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n       this.refreshProfile();\r\n     }\r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <div>\r\n            <Profile \r\n            {...this.props}\r\n            profile={this.props.selectedUserProfile}\r\n            status={this.props.status}\r\n            updateUserStatus={this.props.updateUserStatus}\r\n            isOwner={!this.props.match.params.userId}\r\n            savePhoto={this.props.savePhoto}\r\n            saveProfile={this.props.saveProfile} />\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\n// let authRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\nlet mapStateToProps = (state) => ({\r\n  selectedUserProfile: state.profileReducer.selectedUserProfile,\r\n  status: state.profileReducer.status,\r\n  authorizedUserId: state.authHeader.userId,\r\n  isAuth: state.authHeader.isAuth\r\n})\r\n\r\n// let getNewIdFunctionProfileContainer = withRouter(authRedirectComponent);\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n  withRouter\r\n)(ProfileContainer);\r\n// connect(mapStateToProps, {getUserProfile})(getNewIdFunctionProfileContainer);"],"sourceRoot":""}